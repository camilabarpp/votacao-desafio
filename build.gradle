plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.votacao.desafio.'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql:10.20.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'com.h2database:h2'
    testImplementation 'com.h2database:h2'
}

jacoco {
    toolVersion = "0.8.11"
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
    dependsOn test
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
            excludes = [
                    'com.votacao.desafio.common.*',
                    'com.votacao.desafio.entity.*',
                    'com.votacao.desafio.dto.*',
                    'com.votacao.desafio.*Application',
                    '**/*Request*',
                    '**/*Response*',
                    '**/*DTO*'
            ]
        }

        rule {
            element = 'CLASS'
            includes = ['com.votacao.desafio.service.*']
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }
        }

        rule {
            element = 'CLASS'
            includes = ['com.votacao.desafio.controller.*']
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification